{
  "hash": "8b3532542b146a877e02a659bd2fc118",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Biostatistics and R\"\nsubtitle: Lecture 1\nformat:\n  revealjs:\n    theme: clean.scss\n    scrollable: true\n    footer: \"Lecture 1 - [Back to home](https://madfudolig.quarto.pub/introtobiostats/)\"\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n    slide-number: true\n    menu: true\n    code-annotations: true\n    chalkboard: true\n    engine: knitr\n    echo: true\n    code-fold: false\n    \n  pdf: \n    number-sections: true\n---\n\n# Outline\n\n- Introduction to Biostatistics\n- Introduction to `R`\n\n\n# Introduction to Biostatistics\n\n## *Datafication*\n\nThe field of statistics has grown in recent years primarily due to the *datafication* of the world.\n\n::: callout-important\n98% of all stored information is digital. Collected data is increasing even at this very moment.\n:::\n\n## Why statistics?\n\n::: {.callout-note title=\"Statistics\"}\nStatistics is a field of study concerned with:\n\n- The collection, organization, summarization, and analysis of data\n- The drawing of inferences about a body of data when only a part of the data is observed.\n:::\n\nData $\\to$ Numbers $\\to$ Information $\\to$ Investigation $\\to$ Communication\n\n## Statistical Thinking\n\nHow is statistical thinking different from mathematical thinking?\n\n\n::: {.callout-note title=\"Statistical Thinking\"}\nStatistical thinking involves understanding and analyzing data while accounting for uncertainty!\n:::\n\n## Activity\n\nFlip a coin 10 times. If you don't have a coin, search \"coin flip\" on Google.\n\n::: callout-note\nHow many times did you get heads? Do you think the coin you flipped was fair?\n:::\n\n## Extensions of Statistics\n\n:::{.panel-tabset}\n\n### Biostatistics\n\nBiostatistics involves applying statistical concepts to data from the biological sciences, health sciences, and medicine.\n\n### Data Science\n\nData science is the study of how to extract useful information from data using quantitative methods and theories from many fields. The field focuses on large data sets that were not originally designed or collected to address the question of interest.\n\n:::\n\n## Sources of Data\n\nAvailable data usually come from the following sources:\n\n- Records\n- Surveys\n- Experiments\n- Data Banks\n- Prior Literature\n\n## Categories of Statistics\n\n:::{.panel-tabset}\n\n### Descriptive Statistics\n\nDescriptive statistics are used to describe properties of complex sets of numbers. Summary statistics are a good example of descriptive statistics.\n\n### Inferential Statistics\n\nInferential statistics are used to infer information from a smaller group (sample) to a more general group (population). \n:::\n\n## Random Variables\n\nRandom variables have values obtained arise as a result of chance factors, so that they cannot be exactly predicted in advance. Values of random variables resulting from measurement procedures are referred to as *observations/measurements*.\n\n::: callout-note\nRandom variables could be classified as qualitative or quantitative.\n:::\n\n## Random Variable Types\n:::{.panel-tabset}\n\n### Quantitative Variables\n\nQuantitative variables are variables that can be measured or characterized with a numerical value.\n\n::: {.callout-note title=\"Discrete Random Variables\"}\nA **discrete variable** is characterized by gaps or interruptions in the values that it can assume. \n\nExample: Customer counts at Cafe Rio, Number of missing teeth, Likert Scale scores\n:::\n\n::: {.callout-note title=\"Continuous Random Variables\"}\nA **continuous variable** is characterized by gaps or interruptions in the values that it can assume.\n\nExample: Speed, Weight, Time\n:::\n\n### Qualitative Variables\n\nQualitative variables cannot be measured numerically, but can be described categorically. Discrete and qualitative variables are also known as *categorical variables*.\n\n\n:::\n\n## Data Types {.scrollable}\n\n:::{.panel-tabset}\n\n### Nominal Data\n\nAs the name implies, nominal data consist of “naming” observations or classifying them into various mutually exclusive and collectively exhaustive categories. \n\nExamples: Assigned sex at birth (male,female); HHS Regions (HHS Regions 1-10)\n\n::: callout-important\nNominal data are typically qualitative in nature and does not account for any ordering in variable levels.\n:::\n\n### Ordinal Data\n\nOrdinal data are for variables with values with inherent ordering.\n\nExamples: Shirt size (Small, Medium, Large, XL); Socioeconomic status (Low, Medium, High)\n\n::: callout-important\nOrdinal data can include discrete variables and some qualitative variables. \n:::\n\n### Interval Data\n\nInterval data includes measurements that can be ordered and a distance metric can be defined between two measurements. Interval scales have equal intervals between values with arbitrary zero points.\n\nExamples: Temperature, IQ\n\n### Ratio Data\n\nRatio data is similar to interval data, but with an absolute zero measurement defined as the \"absence\" of the variable being measured.\n\nExamples: Weight, Height\n:::\n\n## Exercise\n\n\n:::{.panel-tabset}\n\n### Question \n\nIdentify the type of data/variable for the following:\n\n- BMI\n- Satisfaction Scale (Unsatisfied, Moderately Satisfied, Satisfied, Very Satisfied)\n- Eye Color\n- Credit Rating\n\n### Answers\n\n- BMI (**ratio**)\n- Satisfaction Scale (Unsatisfied, Moderately Satisfied, Satisfied, Very Satisfied) (**ordinal**)\n- Eye Color (**nominal**)\n- Credit Score (**interval**)\n\n:::\n\n\n## Population vs. Sample\n\n::: {.callout-note title=\"Population\"}\nA population is the largest collection of entities for which we have an interest at a particular time. Measurements of some variable from these entities would generate a population of values for that variable.\n\nAn exact value calculated from a population is referred to as a **parameter**.\n:::\n\n::: {.callout-note title=\"Sample\"}\nA sample is a part of the population.\n\nAn exact value calculated from a sample is referred to as a **statistic**.\n:::\n\n## Population vs. Sample {.smaller}\n\n![Taken from: <https://medium.com/@ritusantra/population-v-s-sample-f17c40967257>](figs/1-sample.png){height=5in}\n\n\n## How to Sample\n\nSampling can be grouped into two broad categories: probability-based/random sampling and convenience sampling.\n\n::: {.panel-tabset}\n\n### Random Samples\n\nA sample is a random sample when the probability with which every respondent was sampled is known. These probabilities are not necessarily equal. Types of random sampling include:\n\n- Simple random sampling\n- Stratified random sampling\n- Cluster sampling\n\n### Convenience Samples\n\nA sample is a convenience sample when the respondents are selected based on ease of access or availability. This could be a potential source of bias.\n:::\n\n## Scientific Method\n\nThe scientific method is a process by which scientific information is collected, analyzed, and reported in order to produce unbiased and replicable results in an effort to provide an accurate representation of observable phenomena.\n\n![](figs/1-scimethod.jpg){height=3in fig-align=\"center\"}\n\n\n# Introduction to `R`\n\n## Installation\n\nYou can install `R` and `RStudio` on your personal computers and laptops by following the instructions on this page: <https://posit.co/download/rstudio-desktop/>\n\n`RStudio` is currently installed on the classroom computers.\n\n## Basic Programming Terminology\n\n- Source Code: A text listing of commands to be compiled or assembled into an executable computer program.\n- Running Code: The act of telling `R` to perform an act by giving it commands through source code.\n- Console Pane: Where `R` commands are entered\n\n::: callout-important\nThere are different types of programming data types such as integers, doubles/numerics, logicals, and characters.\n\n- Integers (int) have values like -1,0,2\n- Numerics (dbl, num) are numbers including integers and decimals,\n- Logicals (logi) are either `TRUE` or `FALSE`\n- Characters (chr)are text variables such as \"Hello, World\", \"Female\", \"Yes\"\n:::\n\n## Basic Programming Terminology\n\n::: {.panel-tabset}\n\n### Vectors\n\nVectors are a series of values. These can be created using the `c()` function, known as the combine/concatenate function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nc(\"A\",\"B\",\"C\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"B\" \"C\"\n```\n\n\n:::\n:::\n\n\n### Variables\n\nYou can store different data types to variables using the `<-` sign.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar1 <- c(1,2,3)\nvar1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nvar1+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nvar2 <- c(\"A\",\"B\",\"C\")\nvar2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\" \"B\" \"C\"\n```\n\n\n:::\n:::\n\n\n### Factors\n\nCategorical data are commonly represented in `R` as factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(c(\"18-39\",\"40-59\",\"60+\"), levels=c(\"18-39\",\"40-59\",\"60+\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18-39 40-59 60+  \nLevels: 18-39 40-59 60+\n```\n\n\n:::\n\n```{.r .cell-code}\nlikert <- c(\"Disagree\", \"Strongly Disagree\",\"Agree\",\"Neutral\",\"Strongly Agree\")\nlikert\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Disagree\"          \"Strongly Disagree\" \"Agree\"            \n[4] \"Neutral\"           \"Strongly Agree\"   \n```\n\n\n:::\n\n```{.r .cell-code}\nfactor(likert, levels=c(\"Strongly Disagree\",\"Disagree\", \"Neutral\",\"Agree\",\"Strongly Agree\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Disagree          Strongly Disagree Agree             Neutral          \n[5] Strongly Agree   \nLevels: Strongly Disagree Disagree Neutral Agree Strongly Agree\n```\n\n\n:::\n:::\n\n:::\n\n## Basic Programming Technology {.scrollable}\n\n::: {.panel-tabset}\n\n### Data Frames\n\nData frames are rectangular spreadsheets. Data are typically imported as data frames.\n\n::: callout-note\nRows correspond to observations and the columns correspond to variables.\n:::\n\nExample:\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n\n### Conditionals\n\nYou can test for mathematical relations such as equality/inequality, resulting in a `TRUE` or `FALSE` value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+1==3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n3+5 <=1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- c(1,2,3,4,5)\nx < 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n### Functions\n\nFunctions are commands in `R`. `c()` is a function that combines different values. You can create a function or use functions built for `R`.\n\nExample: `seq()` is a function that generates a sequence of numbers. The resulting sequence of numbers can be changed by changing the attributes of the function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(1,5,by=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(1,5,length.out=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1.000000 1.444444 1.888889 2.333333 2.777778 3.222222 3.666667 4.111111\n [9] 4.555556 5.000000\n```\n\n\n:::\n:::\n\nTo learn more about what a specific `R` function does, type `?function_name` in the console. (Ex:`?seq`, `?c`)\n:::\n\n## Errors, Warnings, and Messages\n\n:::{.panel-tabset}\n\n### Errors\n\nWhen you input a legitimate error, `R` will warn you using a sentence starting with \"Error in\" and includes a sentence explaining what went wrong.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd(1,2,3)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in add(1, 2, 3): could not find function \"add\"\n```\n\n\n:::\n\n```{.r .cell-code}\nc(\"A\",\"B\")+1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in c(\"A\", \"B\") + 1: non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\n::: callout-note\nIf the text starts with \"Error\", figure out what's causing it. Think of errors as a red traffic light: stop and assess for anything wrong in the code (missing parenthesis, adding characters to numbers, non-existent functions, etc.)\n:::\n\n::: callout-important\nEncountering errors in your code is normal even for an experienced coder. Don't be afraid to review your code if you made an error! This process is called \"debuggging\".\n:::\n\n### Warnings\n\nWhen `R` produces a warning, your code will still be implemented albeit with some caveats.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor_plotting <- data.frame(x=c(1,2,3,4,5), y=c(2,4,5,NA,1))\nlibrary(ggplot2)\nggplot(data=for_plotting,aes(x=x,y=y)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](lecture1_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\nThe plot is displayed, but a warning was raised regarding a missing value. Note that the data frame `for_plotting` has a missing value for `y` denoted by `NA`.\n\n### Messages\n\nIf the output text does not start with an error or a warning, it's just a friendly message from `R` telling you about the output. These messages are typically seen when loading `R` packages or data sets from external sources.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n:::\n\n## `R` packages\n\n`R` packages extend the functionality of `R` by providing additional functions, data, and documentation. These packages are written by `R` users around the world and can be downloaded for free!\n\n::: callout-note\nThink of `R` as a new phone. `R` packages are apps that you can download to use your phone in many different ways.\n:::\n\n## Installing and Loading `R` Packages\n\nLike apps on a phone, `R` packages also need to be installed. These packages can be installed by running the following code snippet `install.packages(\"PackageName\")`. For example, to install the package `tidyverse` used for data manipulation and cleaning, you can run the following code:\n\n```{.r}\ninstall.packages(\"tidyverse\")\n```\n\nTo load this package in `R`, you can use the following syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n::: callout-important\nYou must have an active internet connection to install `R` packages to your device.\n:::\n\n## Exercise\n\n::: {.panel-tabset}\n\n### Exercise\nInstall and load the following packages: `readxl`, `nycflights23` and `knitr`.\n\n### Answer\n\n```{.r}\ninstall.packages(\"readxl\")\ninstall.packages(\"nycflights23\")\ninstall.packages(\"knitr\")\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(nycflights23)\nlibrary(knitr)\n```\n:::\n\n\n:::\n\n## Exploring Data Sets {.scrollable}\n\nThe `nycflights23` package includes some data sets saved as data frames. These data sets are related to all domestic flights departing from one of New York City’s three main airports in 2023: Newark Liberty International (EWR), John F. Kennedy International (JFK), and LaGuardia Airport (LGA).\n\nOne of the data sets in this package is the `flights` data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 435,352 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2023     1     1        1           2038       203      328              3\n 2  2023     1     1       18           2300        78      228            135\n 3  2023     1     1       31           2344        47      500            426\n 4  2023     1     1       33           2140       173      238           2352\n 5  2023     1     1       36           2048       228      223           2252\n 6  2023     1     1      503            500         3      808            815\n 7  2023     1     1      520            510        10      948            949\n 8  2023     1     1      524            530        -6      645            710\n 9  2023     1     1      537            520        17      926            818\n10  2023     1     1      547            545         2      845            852\n# ℹ 435,342 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n::: callout-note\nA tibble is a special type of data frame! The dimensions show the `number of rows x number of columns`. Each row corresponds to an observation, while each column corresponds to the variables describing each observation.\n:::\n\n## Exploring the `flights` data set.\n\nYou can use the following functions to explore a data set.\n\n::: {.panel-tabset}\n### `View()`\n\n`View()` brings up RStudio's built in data viewer. That is, if you want to view data like an Excel sheet.\n\n```{.r}\nView(flights)\n```\n\n### `glimpse()`\n\nThe `glimpse()` function from the package `dplyr` (part of `tidyverse`) provides us with a different view of the data set. It includes the *data type* of each variable defined by the columns of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 435,352\nColumns: 19\n$ year           <int> 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 1, 18, 31, 33, 36, 503, 520, 524, 537, 547, 549, 551, 5…\n$ sched_dep_time <int> 2038, 2300, 2344, 2140, 2048, 500, 510, 530, 520, 545, …\n$ dep_delay      <dbl> 203, 78, 47, 173, 228, 3, 10, -6, 17, 2, -10, -9, -7, -…\n$ arr_time       <int> 328, 228, 500, 238, 223, 808, 948, 645, 926, 845, 905, …\n$ sched_arr_time <int> 3, 135, 426, 2352, 2252, 815, 949, 710, 818, 852, 901, …\n$ arr_delay      <dbl> 205, 53, 34, 166, 211, -7, -1, -25, 68, -7, 4, -13, -14…\n$ carrier        <chr> \"UA\", \"DL\", \"B6\", \"B6\", \"UA\", \"AA\", \"B6\", \"AA\", \"UA\", \"…\n$ flight         <int> 628, 393, 371, 1053, 219, 499, 996, 981, 206, 225, 800,…\n$ tailnum        <chr> \"N25201\", \"N830DN\", \"N807JB\", \"N265JB\", \"N17730\", \"N925…\n$ origin         <chr> \"EWR\", \"JFK\", \"JFK\", \"JFK\", \"EWR\", \"EWR\", \"JFK\", \"EWR\",…\n$ dest           <chr> \"SMF\", \"ATL\", \"BQN\", \"CHS\", \"DTW\", \"MIA\", \"BQN\", \"ORD\",…\n$ air_time       <dbl> 367, 108, 190, 108, 80, 154, 192, 119, 258, 157, 164, 1…\n$ distance       <dbl> 2500, 760, 1576, 636, 488, 1085, 1576, 719, 1400, 1065,…\n$ hour           <dbl> 20, 23, 23, 21, 20, 5, 5, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6,…\n$ minute         <dbl> 38, 0, 44, 40, 48, 0, 10, 30, 20, 45, 59, 0, 59, 0, 0, …\n$ time_hour      <dttm> 2023-01-01 20:00:00, 2023-01-01 23:00:00, 2023-01-01 2…\n```\n\n\n:::\n:::\n\n\n\n### `kable()`\n\nThe `kable()` function is part of the package `knitr`. In this example, we will use another data set in the `nycflights23` package: the `airlines` data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(airlines)\n```\n\n::: {.cell-output-display}\n\n\n|carrier |name                   |\n|:-------|:----------------------|\n|9E      |Endeavor Air Inc.      |\n|AA      |American Airlines Inc. |\n|AS      |Alaska Airlines Inc.   |\n|B6      |JetBlue Airways        |\n|DL      |Delta Air Lines Inc.   |\n|F9      |Frontier Airlines Inc. |\n|G4      |Allegiant Air          |\n|HA      |Hawaiian Airlines Inc. |\n|MQ      |Envoy Air              |\n|NK      |Spirit Air Lines       |\n|OO      |SkyWest Airlines Inc.  |\n|UA      |United Air Lines Inc.  |\n|WN      |Southwest Airlines Co. |\n|YX      |Republic Airline       |\n\n\n:::\n:::\n\n\n### `$`\n\nThe `$` operator allows us to extract and then explore a single variable within a data frame. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nairlines$name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Endeavor Air Inc.\"      \"American Airlines Inc.\" \"Alaska Airlines Inc.\"  \n [4] \"JetBlue Airways\"        \"Delta Air Lines Inc.\"   \"Frontier Airlines Inc.\"\n [7] \"Allegiant Air\"          \"Hawaiian Airlines Inc.\" \"Envoy Air\"             \n[10] \"Spirit Air Lines\"       \"SkyWest Airlines Inc.\"  \"United Air Lines Inc.\" \n[13] \"Southwest Airlines Co.\" \"Republic Airline\"      \n```\n\n\n:::\n:::\n\n:::\n\n## Exercise\n\n::: {.panel-tabset}\n\n### Exercise\n\nCan you provide me with two qualitative variables and two quantitative variables in the dataset `planes` in the `nycflights23` package?\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(planes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4,840\nColumns: 9\n$ tailnum      <chr> \"N101DQ\", \"N101DU\", \"N101HQ\", \"N101NN\", \"N102DN\", \"N102DU…\n$ year         <int> 2020, 2018, 2007, 2013, 2020, NA, 2007, 2013, 1998, NA, 2…\n$ type         <chr> \"Fixed wing multi engine\", \"Fixed wing multi engine\", \"Fi…\n$ manufacturer <chr> \"AIRBUS\", \"C SERIES AIRCRAFT LTD PTNRSP\", \"EMBRAER-EMPRES…\n$ model        <chr> \"A321-211\", \"BD-500-1A10\", \"ERJ 170-200 LR\", \"A321-231\", …\n$ engines      <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ seats        <int> 199, 133, 80, 379, 199, 133, 80, 379, 182, 133, 199, 80, …\n$ speed        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ engine       <chr> \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turb…\n```\n\n\n:::\n:::\n\n\nColumns made up of characters are categorical variables. Quantitative variables are those marked as integers.\n\n::: callout-important\n`NA` means that the data point is missing. This is not the same as \"NA\", which is a character.\n:::\n\n:::\n\n\n## Exercise\n\n::: {.panel-tabset}\n\n### Exercise\n\nExplore the data set `iris`.\n\n- How many observations does `iris` have?\n- How many variables does `iris` have?\n- Use `glimpse()` to determine the type of data of each column of `iris`.\n- Use the `$` operator to extract the species variable in `iris`\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n```\n\n\n:::\n\n```{.r .cell-code}\niris$Species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] setosa     setosa     setosa     setosa     setosa     setosa    \n  [7] setosa     setosa     setosa     setosa     setosa     setosa    \n [13] setosa     setosa     setosa     setosa     setosa     setosa    \n [19] setosa     setosa     setosa     setosa     setosa     setosa    \n [25] setosa     setosa     setosa     setosa     setosa     setosa    \n [31] setosa     setosa     setosa     setosa     setosa     setosa    \n [37] setosa     setosa     setosa     setosa     setosa     setosa    \n [43] setosa     setosa     setosa     setosa     setosa     setosa    \n [49] setosa     setosa     versicolor versicolor versicolor versicolor\n [55] versicolor versicolor versicolor versicolor versicolor versicolor\n [61] versicolor versicolor versicolor versicolor versicolor versicolor\n [67] versicolor versicolor versicolor versicolor versicolor versicolor\n [73] versicolor versicolor versicolor versicolor versicolor versicolor\n [79] versicolor versicolor versicolor versicolor versicolor versicolor\n [85] versicolor versicolor versicolor versicolor versicolor versicolor\n [91] versicolor versicolor versicolor versicolor versicolor versicolor\n [97] versicolor versicolor versicolor versicolor virginica  virginica \n[103] virginica  virginica  virginica  virginica  virginica  virginica \n[109] virginica  virginica  virginica  virginica  virginica  virginica \n[115] virginica  virginica  virginica  virginica  virginica  virginica \n[121] virginica  virginica  virginica  virginica  virginica  virginica \n[127] virginica  virginica  virginica  virginica  virginica  virginica \n[133] virginica  virginica  virginica  virginica  virginica  virginica \n[139] virginica  virginica  virginica  virginica  virginica  virginica \n[145] virginica  virginica  virginica  virginica  virginica  virginica \nLevels: setosa versicolor virginica\n```\n\n\n:::\n:::\n\n\n`iris` has 150 observations and 5 variables: Sepal Length, Sepal Width, Petal Length, Petal Width, and Species. Species is a **factor**, while all the other variables are numeric (dbl) in nature.\n:::\n\n# Summary\n\n## Summary \n\n- Introduced biostatistics and its importance\n- Introduced `R`\n- Explored data sets\n\n## What's next?\n\nWe will be using `R` to work with data and perform statistical analysis. We will also explore how to use `R` to explore and describe data from external sources (.csv files).",
    "supporting": [
      "lecture1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}