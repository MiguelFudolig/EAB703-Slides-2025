{
  "hash": "1f86e5388329b29b0cb7ecb48d3f98c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Descriptive Statistics\"\nsubtitle: Lecture 2\nformat:\n  revealjs:\n    theme: clean.scss\n    scrollable: true\n    footer: \"Lecture 2 - [Back to home](https://madfudolig.quarto.pub/introtobiostats/)\"\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n    slide-number: true\n    menu: true\n    code-annotations: hover\n    chalkboard: true\n    engine: knitr\n    echo: true\n    code-fold: false\n    \n  pdf: \n    number-sections: true\n---\n\n\n# Outline\n\n- Data Organization\n- Measures of Central Tendency\n- Measures of Dispersion\n- Measure of Location\n- Skewness and Kurtosis\n- Basic Data Visualization using R\n\n# Data Organization\n\n## Data Exploration\n\nIn order to explore the underlying nature of the provided information, we need to explore the data. This exploration is made much easier if the data are organized and summarized.\n\n::: {.callout-note title=\"Raw Data\"}\nRaw data are measurements that have not been organized, summarized, or otherwise manipulated. As a biostatistician, it is common to be provided the raw data for any analysis.\n:::\n\n## Ordered Lists\n\nThe easiest step in organizing data is simply to order the data. \n\n:::{.callout-note title=\"Ordered Lists/Arrays\"}\nAn ordered list is a list of values that are arranged from the smallest to largest value (or largest to smallest).\n:::\n\n## Ordered Lists in `R` {.scrollable}\n\nThere are different ways to create an ordered list in `R`. Let us use the `iris` dataset in `R` and the `tidyverse()` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.4     v readr     2.1.5\nv forcats   1.0.0     v stringr   1.5.1\nv ggplot2   3.5.2     v tibble    3.3.0\nv lubridate 1.9.4     v tidyr     1.3.1\nv purrr     1.1.0     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.~\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.~\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.~\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.~\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s~\n```\n\n\n:::\n:::\n\n\n\n\n\n:::{.panel-tabset}\n\n### `sort()`\n\n`sort(vector)` can arrange a vector in ascending or descending order. This works for both numeric and character vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsort(iris$Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 4.3 4.4 4.4 4.4 4.5 4.6 4.6 4.6 4.6 4.7 4.7 4.8 4.8 4.8 4.8 4.8 4.9 4.9\n [19] 4.9 4.9 4.9 4.9 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.1 5.1 5.1 5.1\n [37] 5.1 5.1 5.1 5.1 5.1 5.2 5.2 5.2 5.2 5.3 5.4 5.4 5.4 5.4 5.4 5.4 5.5 5.5\n [55] 5.5 5.5 5.5 5.5 5.5 5.6 5.6 5.6 5.6 5.6 5.6 5.7 5.7 5.7 5.7 5.7 5.7 5.7\n [73] 5.7 5.8 5.8 5.8 5.8 5.8 5.8 5.8 5.9 5.9 5.9 6.0 6.0 6.0 6.0 6.0 6.0 6.1\n [91] 6.1 6.1 6.1 6.1 6.1 6.2 6.2 6.2 6.2 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3\n[109] 6.4 6.4 6.4 6.4 6.4 6.4 6.4 6.5 6.5 6.5 6.5 6.5 6.6 6.6 6.7 6.7 6.7 6.7\n[127] 6.7 6.7 6.7 6.7 6.8 6.8 6.8 6.9 6.9 6.9 6.9 7.0 7.1 7.2 7.2 7.2 7.3 7.4\n[145] 7.6 7.7 7.7 7.7 7.7 7.9\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nsort(iris$Sepal.Length,decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 7.9 7.7 7.7 7.7 7.7 7.6 7.4 7.3 7.2 7.2 7.2 7.1 7.0 6.9 6.9 6.9 6.9 6.8\n [19] 6.8 6.8 6.7 6.7 6.7 6.7 6.7 6.7 6.7 6.7 6.6 6.6 6.5 6.5 6.5 6.5 6.5 6.4\n [37] 6.4 6.4 6.4 6.4 6.4 6.4 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.2 6.2 6.2\n [55] 6.2 6.1 6.1 6.1 6.1 6.1 6.1 6.0 6.0 6.0 6.0 6.0 6.0 5.9 5.9 5.9 5.8 5.8\n [73] 5.8 5.8 5.8 5.8 5.8 5.7 5.7 5.7 5.7 5.7 5.7 5.7 5.7 5.6 5.6 5.6 5.6 5.6\n [91] 5.6 5.5 5.5 5.5 5.5 5.5 5.5 5.5 5.4 5.4 5.4 5.4 5.4 5.4 5.3 5.2 5.2 5.2\n[109] 5.2 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0\n[127] 5.0 5.0 4.9 4.9 4.9 4.9 4.9 4.9 4.8 4.8 4.8 4.8 4.8 4.7 4.7 4.6 4.6 4.6\n[145] 4.6 4.5 4.4 4.4 4.4 4.3\n```\n\n\n:::\n:::\n\n### `arrange()`\n\n`arrange(dataframe,variable)` can sort a column in a data frame. This function is from the `dplyr` package, which is a part of tidyverse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- arrange(iris,Sepal.Length)\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 4.3, 4.4, 4.4, 4.4, 4.5, 4.6, 4.6, 4.6, 4.6, 4.7, 4.7, 4.~\n$ Sepal.Width  <dbl> 3.0, 2.9, 3.0, 3.2, 2.3, 3.1, 3.4, 3.6, 3.2, 3.2, 3.2, 3.~\n$ Petal.Length <dbl> 1.1, 1.4, 1.3, 1.3, 1.3, 1.5, 1.4, 1.0, 1.4, 1.3, 1.6, 1.~\n$ Petal.Width  <dbl> 0.1, 0.2, 0.2, 0.2, 0.3, 0.2, 0.3, 0.2, 0.2, 0.2, 0.2, 0.~\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s~\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$Sepal.Length\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 4.3 4.4 4.4 4.4 4.5 4.6 4.6 4.6 4.6 4.7 4.7 4.8 4.8 4.8 4.8 4.8 4.9 4.9\n [19] 4.9 4.9 4.9 4.9 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.1 5.1 5.1 5.1\n [37] 5.1 5.1 5.1 5.1 5.1 5.2 5.2 5.2 5.2 5.3 5.4 5.4 5.4 5.4 5.4 5.4 5.5 5.5\n [55] 5.5 5.5 5.5 5.5 5.5 5.6 5.6 5.6 5.6 5.6 5.6 5.7 5.7 5.7 5.7 5.7 5.7 5.7\n [73] 5.7 5.8 5.8 5.8 5.8 5.8 5.8 5.8 5.9 5.9 5.9 6.0 6.0 6.0 6.0 6.0 6.0 6.1\n [91] 6.1 6.1 6.1 6.1 6.1 6.2 6.2 6.2 6.2 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3\n[109] 6.4 6.4 6.4 6.4 6.4 6.4 6.4 6.5 6.5 6.5 6.5 6.5 6.6 6.6 6.7 6.7 6.7 6.7\n[127] 6.7 6.7 6.7 6.7 6.8 6.8 6.8 6.9 6.9 6.9 6.9 7.0 7.1 7.2 7.2 7.2 7.3 7.4\n[145] 7.6 7.7 7.7 7.7 7.7 7.9\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- arrange(iris,desc(Sepal.Length))\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 7.9, 7.7, 7.7, 7.7, 7.7, 7.6, 7.4, 7.3, 7.2, 7.2, 7.2, 7.~\n$ Sepal.Width  <dbl> 3.8, 3.8, 2.6, 2.8, 3.0, 3.0, 2.8, 2.9, 3.6, 3.2, 3.0, 3.~\n$ Petal.Length <dbl> 6.4, 6.7, 6.9, 6.7, 6.1, 6.6, 6.1, 6.3, 6.1, 6.0, 5.8, 5.~\n$ Petal.Width  <dbl> 2.0, 2.2, 2.3, 2.0, 2.3, 2.1, 1.9, 1.8, 2.5, 1.8, 1.6, 2.~\n$ Species      <fct> virginica, virginica, virginica, virginica, virginica, vi~\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$Sepal.Length\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 7.9 7.7 7.7 7.7 7.7 7.6 7.4 7.3 7.2 7.2 7.2 7.1 7.0 6.9 6.9 6.9 6.9 6.8\n [19] 6.8 6.8 6.7 6.7 6.7 6.7 6.7 6.7 6.7 6.7 6.6 6.6 6.5 6.5 6.5 6.5 6.5 6.4\n [37] 6.4 6.4 6.4 6.4 6.4 6.4 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.3 6.2 6.2 6.2\n [55] 6.2 6.1 6.1 6.1 6.1 6.1 6.1 6.0 6.0 6.0 6.0 6.0 6.0 5.9 5.9 5.9 5.8 5.8\n [73] 5.8 5.8 5.8 5.8 5.8 5.7 5.7 5.7 5.7 5.7 5.7 5.7 5.7 5.6 5.6 5.6 5.6 5.6\n [91] 5.6 5.5 5.5 5.5 5.5 5.5 5.5 5.5 5.4 5.4 5.4 5.4 5.4 5.4 5.3 5.2 5.2 5.2\n[109] 5.2 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.1 5.0 5.0 5.0 5.0 5.0 5.0 5.0 5.0\n[127] 5.0 5.0 4.9 4.9 4.9 4.9 4.9 4.9 4.8 4.8 4.8 4.8 4.8 4.7 4.7 4.6 4.6 4.6\n[145] 4.6 4.5 4.4 4.4 4.4 4.3\n```\n\n\n:::\n:::\n\n:::\n\n## Ordered Lists: Pros and Cons\n\nThe ordered list makes it easier to see the data sorted by a specific variable. However, it may be impractical to use for large data sets. \n\n## Exercise\n\nThe data set `USArrests` contains statistics, in arrests per 100,000 residents for assault, murder, and rape in each of the 50 US states in 1973.\n\n:::{.panel-tabset}\n\n### Exercise\n\nCreate an ordered list for the `Assault` variable in `USArrests`. Which state had the highest rate for assault per 100,000 residents?\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(USArrests$Assault,decreasing = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 337 335 300 294 285 279 276 263 259 255 254 252 249 249 238 236 211 204 201\n[20] 190 188 178 174 161 159 159 156 151 149 145 120 120 120 115 113 110 109 109\n[39] 106 102  86  83  81  72  57  56  53  48  46  45\n```\n\n\n:::\n\n```{.r .cell-code}\narrange(USArrests,desc(Assault))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               Murder Assault UrbanPop Rape\nNorth Carolina   13.0     337       45 16.1\nFlorida          15.4     335       80 31.9\nMaryland         11.3     300       67 27.8\nArizona           8.1     294       80 31.0\nNew Mexico       11.4     285       70 32.1\nSouth Carolina   14.4     279       48 22.5\nCalifornia        9.0     276       91 40.6\nAlaska           10.0     263       48 44.5\nMississippi      16.1     259       44 17.1\nMichigan         12.1     255       74 35.1\nNew York         11.1     254       86 26.1\nNevada           12.2     252       81 46.0\nIllinois         10.4     249       83 24.0\nLouisiana        15.4     249       66 22.2\nDelaware          5.9     238       72 15.8\nAlabama          13.2     236       58 21.2\nGeorgia          17.4     211       60 25.8\nColorado          7.9     204       78 38.7\nTexas            12.7     201       80 25.5\nArkansas          8.8     190       50 19.5\nTennessee        13.2     188       59 26.9\nMissouri          9.0     178       70 28.2\nRhode Island      3.4     174       87  8.3\nWyoming           6.8     161       60 15.6\nNew Jersey        7.4     159       89 18.8\nOregon            4.9     159       67 29.3\nVirginia          8.5     156       63 20.7\nOklahoma          6.6     151       68 20.0\nMassachusetts     4.4     149       85 16.3\nWashington        4.0     145       73 26.2\nIdaho             2.6     120       54 14.2\nOhio              7.3     120       75 21.4\nUtah              3.2     120       80 22.9\nKansas            6.0     115       66 18.0\nIndiana           7.2     113       65 21.0\nConnecticut       3.3     110       77 11.1\nKentucky          9.7     109       52 16.3\nMontana           6.0     109       53 16.4\nPennsylvania      6.3     106       72 14.9\nNebraska          4.3     102       62 16.5\nSouth Dakota      3.8      86       45 12.8\nMaine             2.1      83       51  7.8\nWest Virginia     5.7      81       39  9.3\nMinnesota         2.7      72       66 14.9\nNew Hampshire     2.1      57       56  9.5\nIowa              2.2      56       57 11.3\nWisconsin         2.6      53       66 10.8\nVermont           2.2      48       32 11.2\nHawaii            5.3      46       83 20.2\nNorth Dakota      0.8      45       44  7.3\n```\n\n\n:::\n:::\n\n\nNorth Carolina had the highest rate of Assault arrests per 100,000 residents with 337.\n:::\n\n## Frequency Tables: Categorical Variables\n\nOne way to summarize a data set is through frequency tables, which counts the frequency of occurrence of values in the data set. To group a set of observations, we select a set of contiguous, nonoverlapping intervals such that each value in the set of observations can be placed in one, and only one, of the intervals. \n\n::: callout-note\nFor categorical variables, these intervals can be defined by the categories in the variable.\n:::\n\n::: callout-important\nFrequency tables are also referred to as frequency distributions.\n:::\n## Frequency Tables: Categorical Variables {.scrollable}\n\nHere is an example of a frequency table. The data set `flights` in the `nycflights23` package includes data for all flights that departed from airports in New York city. Recall that this data set has 435,452 rows. If we wished to determine where most flights originated from (column `origin`), we can count the number of rows that mentioned each of the airports.\n\nTo create a basic frequency table, we can use the function `count(dataframe,variable)` in the `dplyr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights23)\ncount(flights,origin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  origin      n\n  <chr>   <int>\n1 EWR    138578\n2 JFK    133048\n3 LGA    163726\n```\n\n\n:::\n:::\n\n\n## Exercise\n\nFor the following exercise, use the `infert` data set, which has data on education level, age, parity (previous pregnancies), and the incidence of infertility after spontaneous and induced abortion.\n\n:::{.panel-tabset}\n### Exercise\n\nAfter examining the data set using `glimpse`, create a frequency table for the education level of the subjects given by the variable `education`.\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncount(infert,education)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  education   n\n1    0-5yrs  12\n2   6-11yrs 120\n3   12+ yrs 116\n```\n\n\n:::\n:::\n\n:::\n\n## Relative Frequency\n\nIt may be useful at times to know the proportion, rather than the number, of values falling within a particular class interval. We obtain this information by dividing the number of values in the particular class interval by the total number of values. For an interval with $k$ occurrences out of a total of $N$ events, the relative frequency can be calculated by:\n\n$$\nRel. Freq. = n/N\n$$\n\n::: callout-note\nThe relative frequency can be reported as a decimal or as a percentage ($\\times 100\\%$).\n:::\n\n## Cumulative Relative Frequency\n\nWe may sum, or cumulate, the relative frequencies to facilitate obtaining information regarding the relative frequency of values within two or more contiguous class intervals.\n\n::: callout-note\nThe sum of *relative* frequencies is referred to as the **cumulative relative frequency**\n:::\n\n## Calculating Relative and Cumulative Frequencies {.scrollable}\n\nLet's try to calculate these frequencies by hand using the `origin` frequency distribution example from `nycflights`.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\\begin{table}\n\\fontsize{12.0pt}{14.4pt}\\selectfont\n\\begin{tabular*}{\\linewidth}{@{\\extracolsep{\\fill}}lr}\n\\toprule\norigin & n \\\\ \n\\midrule\\addlinespace[2.5pt]\nEWR & 138578 \\\\ \nJFK & 133048 \\\\ \nLGA & 163726 \\\\ \n\\bottomrule\n\\end{tabular*}\n\\end{table}\n\n:::\n:::\n\n\n:::{.panel-tabset}\n\n### Relative Freq.\n\nFor EWR: $\\frac{138578}{(138578 + 133048 + 163726)}=$ 0.3183125\n\nFor JFK: $\\frac{133048}{(138578 + 133048 + 163726)}=$ 0.3056102\n\nFor LGA: $\\frac{163726}{(138578 + 133048 + 163726)}=$ 0.3760773\n\n### Cumulative Freq.\n\nFor EWR:  138578\n\nFor EWR + JFK: $138578+133048=$ 271626\n\nFor EWR+JFK + LGA: $(138578 + 133048 + 163726)=$ 435352\n\n### Cumulative Rel. Freq.\n\nFor EWR: $\\frac{138578}{(138578 + 133048 + 163726)}=$ 0.3183125\n\nFor EWR + JFK: $\\frac{138578+133048}{(138578 + 133048 + 163726)}=$ 0.6239227\n\nFor EWR+JFK + LGA: $\\frac{133048+138578 + 163726}{(138578 + 133048 + 163726)}=$ 1\n:::\n\n## Frequency Tables in `R`\n\nThere are a lot of ways to create frequency tables in `R`. One of the easiest and most complete ways is to use the  function `freq` in the package `summarytools`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"summarytools\") # if you have not installed summarytools yet.\n\nlibrary(summarytools)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'summarytools'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:tibble':\n\n    view\n```\n\n\n:::\n\n```{.r .cell-code}\nfreq(flights$origin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFrequencies  \nflights$origin  \nType: Character  \n\n                Freq   % Valid   % Valid Cum.   % Total   % Total Cum.\n----------- -------- --------- -------------- --------- --------------\n        EWR   138578     31.83          31.83     31.83          31.83\n        JFK   133048     30.56          62.39     30.56          62.39\n        LGA   163726     37.61         100.00     37.61         100.00\n       <NA>        0                               0.00         100.00\n      Total   435352    100.00         100.00    100.00         100.00\n```\n\n\n:::\n:::\n\n\n::: callout-important\nThe `<NA>` row also counts rows that have missing values. The `%Valid` column only counts non-missing data, while the `% Total` column counts missing data in calculating relative and cumulative frequencies. In this example, there are no missing rows, hence the columns are the same.\n\nThe function also does not output cumulative frequencies, but usually cumulative relative frequencies suffice.\n:::\n\n## Frequency Tables: Quantitative Variables\n\nThese intervals are usually referred to as **class intervals**.\n\n::: callout-important\nToo few intervals are undesirable because of the resulting loss of information. On the other hand, if too many intervals are used, the objective of summarization will not be met. \n\nA commonly followed rule of thumb states that there should be no fewer than 5 intervals and no more than 15. However, if the number of intervals fall outside this range, it should be based on theoretical/foundational concepts that could justify the choice of intervals. \n:::\n\n## Frequency Tables in `R`: QV\n\nLike categorical variables, there are a lot of ways to create a frequency tables for quantitative variables. However, using `freq()` directly on a quantitative variable could lead to trivial frequency tables.\n\n::: callout-warning\nWhat happens if you run the following code?\n\n```{.r}\nfreq(iris$Sepal.Length)\n```\n\n:::\n\n\n## Frequency Tables in `R`: `hist()`\n\n\n### `hist(vector)`\n\nThe function `hist()` creates both a histogram or a vector of frequencies. To show the vector of frequencies, the plotting mechanism must be turned off. This can be done by setting `plot=F`. For example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(iris$Sepal.Length,plot=F)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$breaks\n[1] 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0\n\n$counts\n[1]  5 27 27 30 31 18  6  6\n\n$density\n[1] 0.06666667 0.36000000 0.36000000 0.40000000 0.41333333 0.24000000 0.08000000\n[8] 0.08000000\n\n$mids\n[1] 4.25 4.75 5.25 5.75 6.25 6.75 7.25 7.75\n\n$xname\n[1] \"iris$Sepal.Length\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n```\n\n\n:::\n:::\n\n::: callout-note\nIn this output:\n\n- `Breaks` are the endpoints of the intervals used to create the frequency table. \n- `counts` are the frequencies for each interval.\n- `mids` are the midpoints of each interval, which is commonly used as the representative numbers of each interval.\n\n:::\n\n## Frequency Tables in `R`:`cut(vector,breaks)` and `freq(vector)`\n\n`cut()` creates a factor including the intervals for the quantitative variable based on the breaks you provide it. You can provide the breaks using the `seq()` function or the `c()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# We must first create a vector of intervals for our frequency table.\nranges <- cut(iris$Sepal.Length,breaks=seq(from=4,to=8,by=0.5)) # <1>\nhead(ranges) # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] (5,5.5] (4.5,5] (4.5,5] (4.5,5] (4.5,5] (5,5.5]\nLevels: (4,4.5] (4.5,5] (5,5.5] (5.5,6] (6,6.5] (6.5,7] (7,7.5] (7.5,8]\n```\n\n\n:::\n:::\n\n\n1. `seq(from=4,to=8,by=0.5)` provides a vector of numbers from 4 to 8 in increments of 0.5.\n2. The \"(x,y]\" notation in the output means that the interval includes y, but not x. The `head()` function only shows the first 6 elements of ranges.\n\n\nWe can now make a frequency table out of the intervals provided by `cut()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfreq(ranges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFrequencies  \nranges  \nType: Factor  \n\n                Freq   % Valid   % Valid Cum.   % Total   % Total Cum.\n------------- ------ --------- -------------- --------- --------------\n      (4,4.5]      5      3.33           3.33      3.33           3.33\n      (4.5,5]     27     18.00          21.33     18.00          21.33\n      (5,5.5]     27     18.00          39.33     18.00          39.33\n      (5.5,6]     30     20.00          59.33     20.00          59.33\n      (6,6.5]     31     20.67          80.00     20.67          80.00\n      (6.5,7]     18     12.00          92.00     12.00          92.00\n      (7,7.5]      6      4.00          96.00      4.00          96.00\n      (7.5,8]      6      4.00         100.00      4.00         100.00\n         <NA>      0                               0.00         100.00\n        Total    150    100.00         100.00    100.00         100.00\n```\n\n\n:::\n:::\n\n\n## Exercise\n\nUse the `infert` data set, which has data on education level, age, parity (previous pregnancies), and the incidence of infertility after spontaneous and induced abortion.\n\n:::{.panel-tabset}\n### Exercise\n\nCreate a frequency distribution table with relative and cumulative relative frequencies for the education level of the subjects given by the variable `education`.\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfreq(infert$education)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFrequencies  \ninfert$education  \nType: Factor  \n\n                Freq   % Valid   % Valid Cum.   % Total   % Total Cum.\n------------- ------ --------- -------------- --------- --------------\n       0-5yrs     12      4.84           4.84      4.84           4.84\n      6-11yrs    120     48.39          53.23     48.39          53.23\n      12+ yrs    116     46.77         100.00     46.77         100.00\n         <NA>      0                               0.00         100.00\n        Total    248    100.00         100.00    100.00         100.00\n```\n\n\n:::\n:::\n\n:::\n\n# Measures of Central Tendency\n\n## Descriptive Measures\n\nAlthough frequency distributions serve useful purposes, there are many situations that require other types of data summarization. What we need in many instances is the ability to summarize the data by means of a single number called a **descriptive measure**. Descriptive measures may be computed from the data of a sample or the data of a population.\n\n::: {.callout-note title=\"Statistic vs. Parameter\"}\n\n**Statistics** are descriptive measures computed from a sample. Statistics are typically represented by standard alphabet symbols ($\\bar{x},p,r$).\n\n**Parameters** are descriptive measures computed from a population. Parameters are typically represented by Greek letters ($\\mu,\\pi,\\rho$).\n\n:::\n\n## Measures of Central Tendency\n\nMeasures of central tendency provides information on where the central point of the data is. The most common measures of central tendency are:\n\n- Mean\n- Median\n- Mode\n\n## Mean\n\nThe mean, specifically the *arithmetic mean*, is the most familiar measure of central tendency.\n\n::: {.panel-tabset}\n\n### Population Mean\n::: {.callout-note title=\"Population Mean\"}\nThe population mean is calculated by adding all the values in the population and dividing by the population size $N$. Formally, for a vector of values given by $(X_1,X_2,X_3,..., X_N)$ defining the population, the mean $\\mu$ can be calculated using the following equation:\n\n$$\n\\mu = \\frac{(X_1+X_2+X_3+...+X_N)}{N} = \\frac{\\sum_{i=1}^N X_i}{N}\n$$\n:::\n\n### Sample Mean\n::: {.callout-note title=\"Sample Mean\"}\nThe sample mean is calculated by adding all the values in the sample and dividing by the sample size $k$. Formally, for a vector of values given by $(X_1,X_2,X_3,..., X_k)$ defining the population, the mean $\\bar{x}$ can be calculated using the following equation:\n\n$$\n\\bar{x} = \\frac{(X_1+X_2+X_3+...+X_k)}{k} = \\frac{\\sum_{i=1}^k X_i}{k}\n$$\n:::\n:::\n\n## Mean: Example\n\nWhat is the mean of the following numbers: 5, 27, 26, 30, 31?\n\n\n:::{.panel-tabset}\n### Math Method\n\nThe mean can be calculated using the formula $(5+27+26+30+31)/5=$ 23.8\n\n### `R` method\n\nThe function `mean()` outputs the mean of a vector of numbers. Remember to always put the numbers inside the `c()` function to form a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmean(c(5,27,26,30,31))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23.8\n```\n\n\n:::\n:::\n\n\n:::\n\n## Mean: Example\n\nThe function `mean()` can also be used to calculate means of quantitative variables in data frames.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmean(iris$Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.843333\n```\n\n\n:::\n:::\n\n## Mean: Exercise\n\nThe data set `cars` include the speed (`speed`,in mph) and stopping distance (`dist`,in ft) of 50 cars recorded in the 1920s. \n\n::: {.panel-tabset}\n### Exercise\n\nFind the mean stopping distance for these 50 cars.\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmean(cars$dist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 42.98\n```\n\n\n:::\n:::\n\nThe mean stopping distance is 42.98 ft.\n:::\n\n## Mean: Advantages and Disadvantages\n\n::: {.callout-note title=\"Advantages\"}\nThe mean is unique to a specific set of values, i.e. there is only one mean for every data set. The mean is also relatively easy to calculate and is a well-known summary statistic.\n:::\n\n::: {.callout-note title=\"Disadvantages\"}\nThe mean is easily influenced by extreme values. As an example. recall the mean of the following numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmean(c(5,27,26,30,31))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23.8\n```\n\n\n:::\n:::\n\n\nNow, if 31 was replaced by an extreme number, say 310, the new mean would be very different.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmean(c(5,27,26,30,310))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 79.6\n```\n\n\n:::\n:::\n\n\n:::\n## Median\n\nThe median is the middle value of ordered data.\n\n::: callout-important\nIf there is an odd number of observations, the median is a value in the middle of the data.\n\nIf there is an even number of observations, the median is the average of the two middle values. \n:::\n\n## Median: Example\n\n:::{.panel-tabset}\n### Example 1: Odd\n\nWhat is the median of the following numbers? 83.07 72.15 89.61 81.68 87.26\n\n- Sort the values first in ascending order: 72.15, 81.68, 83.07, 87.26, 89.61\n- There are five values, which means there is a middle value (83.07). Hence, the median is **83.07**.\n\n### Example 2: Even\n\nWhat is the median of the following numbers? 100 3 7 5 8 2\n\n- Sort the values first in ascending order: 2 3 5 7 8 100\n- There are six values, which means there is no middle value. We need to take the average of the two middle values (5,7). Hence, the median is (5+7)/2 = **6**.\n:::\n\n## Median: `R`\n\nIn `R`, we can use the `median(vector)` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(c(83.07, 72.15, 89.61, 81.68, 87.26))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 83.07\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(c(100, 3, 7, 5, 8, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nThis works for variables in data frames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(iris$Sepal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.8\n```\n\n\n:::\n:::\n\n## Median: Exercise in `R`.\n\n\nThe data set `USArrests` contains statistics, in arrests per 100,000 residents for assault, murder, and rape in each of the 50 US states in 1973.\n\n:::{.panel-tabset}\n\n### Exercise\n\nCreate an ordered list for the `Assault` variable in `USArrests`. What is the median rate for assault per 100,000 residents?\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(USArrests$Assault)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 159\n```\n\n\n:::\n:::\n\n\nThe median arrest rate per 100,000 residents in the US in 1973 was 159.\n:::\n\n\n## Median: Advantages and Disadvantages\n\n::: {.callout-note title=\"Advantages\"}\nThe median is unique to a specific set of values, i.e. there is only one median for every data set. The median is also relatively easy to calculate once the data is ordered. Unlike the mean, the median is **NOT** influenced by extreme values.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmedian(c(5,27,26,30,31))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27\n```\n\n\n:::\n:::\n\n\nNow, if 31 was replaced by an extreme number, say 310, the new median would be the same because the middle part of the data did not change.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmedian(c(5,27,26,30,310))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27\n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note title=\"Disadvantages\"}\nWhile the median is a well-known summary statistic, it is limited in the area of inferential statistics. The mean is more versatile as an estimator when it comes to statistical tests compared to the median.\n:::\n\n## Mode\n\nFor a sample of quantitative/qualitative data, the mode is the value that occurs most frequently.\n\n::: callout-important\nIf all values occurred with the same frequency, then the data does not have a mode.\n:::\n\n## Mode: Example\n\nWhat is the mode of the following values? 33, 35, 35, 46, 21, 56, 390.\n\n- The mode is 35 because it occurred the most times.\n\nWhat is the mode of the following values? 21, 35, 35, 46, 21, 56, 390.\n\n- The modes are 21 and 35 because these values occurred twice, which was the highest frequency across the values.\n\nWhat is the mode of the following values? 33, 34, 35, 46, 21, 56, 390.\n\n- There is **NO** mode because all values occurred only once.\n\n## Mode: `R`\n\nWe can use the `freq()` or `hist()` functions in `R` to create a frequency table for the data set, but we often only need the frequency distribution. One function that we can use is the `table` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq_table <- table(iris$Sepal.Length)\nsort(freq_table,decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  5 5.1 6.3 5.7 6.7 5.5 5.8 6.4 4.9 5.4 5.6   6 6.1 4.8 6.5 4.6 5.2 6.2 6.9 7.7 \n 10   9   9   8   8   7   7   7   6   6   6   6   6   5   5   4   4   4   4   4 \n4.4 5.9 6.8 7.2 4.7 6.6 4.3 4.5 5.3   7 7.1 7.3 7.4 7.6 7.9 \n  3   3   3   3   2   2   1   1   1   1   1   1   1   1   1 \n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfreq_table <- table(iris$Species)\nsort(freq_table,decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n    setosa versicolor  virginica \n        50         50         50 \n```\n\n\n:::\n:::\n\nThe mode sepal length in the `iris` data set is 5. There is no mode for the species variable as all species occurred 50 times.\n\n## Mode: Advantages and Disadvantages\n\n::: {.callout-note title=\"Advantages\"}\nThe mode is easily calculable using frequency tables. Unlike the mean and median, it can be calculated for qualitative variables. \n:::\n\n::: {.callout-note title=\"Disadvantages\"}\nThe mode is not unique as data sets can have more than one mode. Modes are not used in inferential statistics for quantitative variables. \n:::\n\n# Measures of Dispersion\n\n## Dispersion\n\nThe dispersion of a set of observations refers to the variability they exhibit. Measures of dispersion convey information on the spread of a data set.\n\n::: callout-note\nSmaller values of measures of dispersion indicate lower amount of dispersion.\n:::\n\n\n## Dispersion Example\n\nConsider populations A and B shown below.\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\ni Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-26-1.pdf)\n:::\n:::\n\n\nWhere are the population of values centered? Which population of values has a higher amount of dispersion?\n\n## Measures of Dispersion\n\nCommonly used measures of dispersion include:\n\n- Range\n- Variance\n- Standard Deviation\n- Coefficient of Variation\n- Interquartile Range\n\n## Range\n\nThe range is the difference between the largest and smallest values in a set of observations.\n\n$$\nR = x_L - x_S\n$$\n\nwhere $x_L$ and $x_S$ are the largest and smallest values, respectively.\n\n## Range: Example\n\nWhat is the range of the following values: 254, 281, 192, 260, 212, 179?\n\n- The maximum value is 281, minimum value is 179. The range can be calculated as 281-179 = 102.\n\n## Range: `R`\n\nThe `diff(range(vector))` function calculates the range of a set of values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(c(254, 281, 192, 260, 212, 179))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 179 281\n```\n\n\n:::\n\n```{.r .cell-code}\ndiff(range(c(254, 281, 192, 260, 212, 179)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 102\n```\n\n\n:::\n:::\n\n\nWe can also use `max()` and `min()` to identify the maximum and minimum values. We can take the difference between the two values to calculate the range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(c(254, 281, 192, 260, 212, 179))-min(c(254, 281, 192, 260, 212, 179))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 102\n```\n\n\n:::\n:::\n\n\n## Range: `R` Example\n\nConsider the `flights` data set from the package `nycflights23`. The `distance` column contains the distance in miles between origin and destination airport for each flight. Calculate the range of the distances between origin and destination airports.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(flights$distance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4983\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(flights$distance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 80\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(flights$distance) - min(flights$distance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4903\n```\n\n\n:::\n:::\n\nThe range is 4,903 miles.\n\n## Exercise\n\nConsider the `iris` data set that gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris.  \n\n::: {.panel-tabset}\n### Exercise\n\n- What is the longest petal length in this data set?\n- What is the shortest petal length in this data set?\n- What is the range of the petal lengths?\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(iris$Petal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.9\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(iris$Petal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(iris$Petal.Length)-min(iris$Petal.Length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.9\n```\n\n\n:::\n:::\n\n\n:::\n\n## Range: Advantages and Disadvantages\n\n\n::: {.callout-note title=\"Advantages\"}\nThe main advantage in using the range is the simplicity of its computation. It also provides information on the span of the set of values.\n:::\n\n::: {.callout-note title=\"Disadvantages\"}\nThe usefulness of the range is limited. The fact that it takes into account only two values causes it to be a poor measure of dispersion. It is often preferable to express the range as a number pair $[x_S,x_L]$, as is seen in some demographic tables in research papers.\n:::\n\n\n## Variance\n\nThe variance is a measure of how far the values are from the mean. \n\n::: callout-important\nThe calculation for *population* and *sample* variances are slightly different. However, both involve taking the **squared difference** of each value and the mean of the data set.\n:::\n\n:::{.panel-tabset}\n### Sample Variance\n\nThe sample variance is denoted by $s^2$. \n\n$$\ns^2 = \\frac{1}{(n-1)}\\sum_{i=1}^n (x_i-\\bar{x})^2\n$$\n\n### Population Variance\n\nThe population variance is denoted by $\\sigma^2$.For a population of size $N$ \n\n$$\n\\sigma^2 = \\frac{1}{(N)}\\sum_{i=1}^N (x_i-\\mu)^2\n$$\n\n### $s^2$ vs. $\\sigma^2$\n\nThe main difference between these two expressions is the denominator term ($n-1$ vs. $N$). This discrepancy is due to a concept of *degrees of freedom*.\n\nThe assumption is that if the sample mean is known, we only need to know $n-1$ values to fully define all the values in the data set. Hence, the denominator for the sample variance is $n-1$.\n\n::: callout-note\nIn most realistic situations, we work with samples. Thus, we usually work with the sample variance.\n:::\n:::\n\n## Standard Deviation\n\nSince the variance involves squared differences, it does not have the same unit as the actual measurements. Hence, we typically use the **standard deviation** to measure the variability in a data set.\n\nThe standard deviation can be calculated by taking the square root of the variance.\n\n$$\ns = \\sqrt{s^2}~~; ~~ \\sigma = \\sqrt{\\sigma^2}\n$$\n\n\n## Standard Deviation and Variance: `R`\n\nThe respective functions `sd(vector)` and `var(vector)` calculates the sample standard deviation and variance for a set of values.\n\n:::{.panel-tabset}\n### Example 1 (Manual)\n\nCalculate the sample variance and standard deviation for the following numbers: 16, 10, 49, 15, 6.\n\nNote that the mean of the numbers is ` r mean(c(16, 10, 49, 15, 6))`\n\n$$\ns^2 = \\frac{1}{5-1}[(16-16)^2 + (10-16)^2 + (49-16)^2 + (15-16)^2 + (6-16)^2] = 293.7\n$$\n\n$$\ns = \\sqrt{s^2} = 17.1\n$$\n\n### Example 2 (R)\n\nUsing R functions, calculate the sample variance and standard deviation for the following numbers: 16, 10, 49, 15, 6.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(c(16, 10, 49, 15, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 293.7\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(c(16, 10, 49, 15, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17.13768\n```\n\n\n:::\n:::\n\n\n### Example 3\n\nUsing R functions, calculate the standard deviation and variance of the murder rates across the 50 US states in 1973. The rates are found in the dataset `USArrests` under the column `Murder`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(USArrests$Murder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.35551\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(USArrests$Murder)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18.97047\n```\n\n\n:::\n:::\n\n:::\n\n## Exercise\n\nThe `faithful` data set includes data on a sample of 272 eruptions of the Old Faithful geyser in Yellowstone National Park. The column `eruptions` contains the eruption time in minutes. \n\n:::{.panel-tabset}\n\n### Exercise\nCalculate the following using `R` functions:\n\n- Mean eruption time\n- Eruption time variance\n- Eruption time standard deviation\n\n### Answer\n\nMean:\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(faithful$eruptions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.487783\n```\n\n\n:::\n:::\n\n\nStandard Deviation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(faithful$eruptions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.141371\n```\n\n\n:::\n:::\n\n\nVariance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(faithful$eruptions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.302728\n```\n\n\n:::\n:::\n\n\n:::\n\n# Measure of Location\n\n## Percentiles \n\n::: {.callout-note title=\"Percentiles\"}\nThe $p$th percentile is the value $x$ such that $p$% of the data are less than $x$. For example, the 10th percentile is the value such that 10% of the data is below this number.\n:::\n\n::: callout-note\nThe 50th percentile is the median because half of the data (50%) is below the median. The maximum value is the 100th percentile, while the minimum value is the 0th percentile.\n:::\n\n::: {.callout-note title=\"Quartiles\"}\n\nThe 25th percentile is also known as the first quartile and denoted as $Q_1$. The 75th percentile is known as the third quartile ($Q_3$). The median is also known as the middle/second quartile ($Q_2$). These numbers are important in describing the variability and skewness in the data.\n:::\n\n\n## Interquartile Range (Measure of Dispersion)\n\nThe interquartile range (IQR) is a measure of variation based on the measures of location. The IQR can be calculated by taking the difference between $Q_3$ and $Q_1$.\n\n$$\nIQR = Q_3 - Q_1\n$$\n\n::: callout-note\nThe main advantage of using IQR is its robustness to extreme values.\n:::\n\n## Percentiles and IQR: `R`\n\nYou can calculate the $p$th percentile of a set of values using the `quantile(vector,p/100)` function. The IQR can be calculated using the `IQR(vector)` function.\n\n::: {.panel-tabset}\n### Example 1\n\ncalculate the 25th percentile and 75th percentile of the eruption times (`eruptions`) of Old Faithful using the `faithful` data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(faithful$eruptions,0.25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    25% \n2.16275 \n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(faithful$eruptions,0.75)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    75% \n4.45425 \n```\n\n\n:::\n:::\n\n\n### Example 2\n\nCalculate the IQR of the eruption times (`eruptions`) of Old Faithful using the `faithful` data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nIQR(faithful$eruptions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.2915\n```\n\n\n:::\n:::\n\n:::\n\n## Exercise\n\nThe `infert` data set includes data from a case-control study that investigates infertillity after spontaneous and induced abortion. \n\n:::{.panel-tabset}\n\n### Exercise\n\n- Use `glimpse()` to determine the variables in the data set.\n- Calculate the mean age for the entire sample.\n- Calculate the standard deviation of the age for the entire sample.\n- Calculate the variance of the age for the entire sample.\n- Calculate the 90th percentile of the age for the entire sample.\n- Calculate the IQR of the age for the entire sample.\n\n### Answers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(infert)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 248\nColumns: 8\n$ education      <fct> 0-5yrs, 0-5yrs, 0-5yrs, 0-5yrs, 6-11yrs, 6-11yrs, 6-11y~\n$ age            <dbl> 26, 42, 39, 34, 35, 36, 23, 32, 21, 28, 29, 37, 31, 29,~\n$ parity         <dbl> 6, 1, 6, 4, 3, 4, 1, 2, 1, 2, 2, 4, 1, 3, 2, 2, 5, 1, 3~\n$ induced        <dbl> 1, 1, 2, 2, 1, 2, 0, 0, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 2~\n$ case           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n$ spontaneous    <dbl> 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1~\n$ stratum        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ~\n$ pooled.stratum <dbl> 3, 1, 4, 2, 32, 36, 6, 22, 5, 19, 20, 37, 9, 29, 21, 18~\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(infert$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31.50403\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(infert$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.251565\n```\n\n\n:::\n\n```{.r .cell-code}\nvar(infert$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27.57893\n```\n\n\n:::\n\n```{.r .cell-code}\nquantile(infert$age,0.9)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n90% \n 39 \n```\n\n\n:::\n\n```{.r .cell-code}\nIQR(infert$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.25\n```\n\n\n:::\n:::\n\nMean: 31.5, Standard Deviation: 5.25, Variance: 27.58, 90th percentile: 39, IQR: 7.25\n:::\n\n# Skewness\n\n## Skewness\nThe skewness provides information on the symmetry of data. If asymmetric, the data is said to be skewed.\n\n::: callout-important\nThe direction of skewness depends on where the “tail” of the data is located.\n:::\n\n![](figs/2-skewness.png)\n\n## Kurtosis\n\nMeasures how flat/peaked a distribution is compared to a bell-shaped curve.\n\n::: callout-important\nBell-shaped distributions are referred to as mesokurtic. Peaked distributions are referred to as leptokurtic. Flatter distributions are referred to as platykurtic.\n:::\n\n![](figs/2-kurtosis.jpg){fig-align=\"center\"}\n\n# Data Visualization\n\n## Grammar of Graphics\n\nThe \"grammar of graphics\" defines a set of rules for constructing statistical graphics by combining different types of layers.\n\nWe can break a graphic into the following essential components:\n\n1. `data`: dataset containing the variables of interest\n2. `geom`: the geometric object in question, related to the type of plot we want to make\n3. `aes`: the aesthetic attributes of the geometric object, such as color, shape, size, fill, etc.\n4. `facet`: breaks up a plot into subplots as defined by the values of another variable\n\n\n\n## `ggplot2` package \n\nThe `ggplot2` package includes the various components of the grammar of graphics. \n\n::: callout-note\nThe `ggplot()` function is used to create a base for the plot which includes the following:\n\n- The data frame where the variables to be plotted belong (`data`)\n- The mapping of the `aes`thetic attributes of the plot.\n\nThe geometry and type of plot will be added as layers to the `ggplot()` function using the `+` symbol.\n:::\n\n## Common Graphs\n\nHere are common plots used in exploring data:\n\n- histograms\n- bar plots\n- boxplots\n\n\n## Histograms\n\nHistograms are plots that visualize the distribution of a numerical value.\n\n::: callout-note\nHistograms are graphical representations of the frequency table/distribution.\n:::\n\n## Histograms in `ggplot()`\n\n:::{.panel-tabset}\n\n### Example\n\nConsider the `infert` data set in `R`. Suppose we want to visualize the distribution of the participant age in the case-control study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) #includes ggplot2\nggplot(data=infert, aes(x=age)) + # <1>\n  geom_histogram(bins=40) # <2>\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-39-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n1. Base layer defining what the source data set is (`data=infert`) and the aesthetic `aes(x=age)`.\n2. `geom_histogram()` adds the layer of a histogram on the base layer, using 40 bins.\n\n### Notes\n\n::: callout-note\nThe `geom_histogram()` function creates a histogram layer on top of the base created by `ggplot()`. You can add other modifications to the histogram (e.g. color, fill, etc.) in the `geom_histogram()` function.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=infert, aes(x=age)) +\n  geom_histogram(bins=40, color=\"white\", fill=\"blue\") \n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-40-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n:::\n\n## Bar plots in `ggplot()`\n\nBar plots are typically used to visualize the frequency distribution for a categorical variable.\n\n::: callout-important\n`geom_bar()` is used to create bar plots in the `ggplot2` package.\n:::\n\n\n## Bar plots in `ggplot()`\n\n\n:::{.panel-tabset}\n\n### Example\n\nConsider the `infert` data set in `R`. Suppose we want to visualize the distribution of the education level (in years) in the case-control study.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) #includes ggplot2\nggplot(data=infert, aes(x=education)) + # <1>\n  geom_bar() # <2>\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-41-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n1. Base layer defining what the source data set is (`data=infert`) and the aesthetic `aes(x=education)`.\n2. `geom_bar()` adds the layer of a bar plot on the base layer.\n\n### Notes 1\n\n::: callout-note\nLike `geom_histogram()`, you can add other modifications to the histogram (e.g. color, fill, etc.) in the `geom_bar()` function.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=infert, aes(x=education)) + \n  geom_bar(color=\"white\", fill=\"blue\", width=0.5)\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-42-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Notes 2\n\nYou can create side-by-side bar plots by facetting. `facet_wrap` allows you to create bar plots across the levels of another variable of interest. Suppose we want to visualize the distribution of education level for the case (1) and control (0) groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=infert, aes(x=education)) + \n  geom_bar(color=\"white\", fill=\"blue\", width=0.5) + \n  facet_wrap(~case)\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-43-1.pdf){fig-pos='H'}\n:::\n:::\n\n:::\n\n\n## Boxplots\n\nBoxplots are another way to visualize the distribution of a numerical value. Boxplots are constructed from the information provided in the five-number summary.\n\n::: {.callout-note title=\"Five-Number Summary\"}\nThe five-number summary of a set of values include the following statistics:\n\n- Minimum\n- First Quartile\n- Median\n- Third Quartile\n- Maximum\n:::\n\n\n\n## Boxplots in `ggplot()`\n\n::: callout-note\nThe function `geom_boxplot()` is used to create boxplots in the `ggplot2` package.\n:::\n\nBoxplots can also provide information on how skewed the data distribution is by the location of the median with respect to the \"box\". \n\n::: callout-important\nIf the median is closer to the first quartile, the data is right-skewed. If the median is closer to the third quartile, the data is left-skewed. If the median is in the middle, then the data is symmetric/unskewed.\n:::\n\n## Boxplots in `ggplot()`\n\n:::{.panel-tabset}\n### Example\n\nConsider the `USArrests` data set. Create a box plot for the arrest rate for assault as given by the `Assault` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=USArrests, aes(x=\"Assault\",y=Assault)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-44-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nThe data appears to be slightly right-skewed because the median is closer to $Q_1$ than $Q_3$.\n\n### Notes 1\n\nYou can also orient boxplots horizontally and overlay the data points using `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=USArrests, aes(y=\"Assault\",x=Assault)) + geom_boxplot() + geom_point()\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-45-1.pdf){fig-pos='H'}\n:::\n:::\n\n### Notes 2\n\nYou can also create separate boxplots for different groups as dictated by a separate variable. Consider the `iris` data set. I can create side-by-side boxplots of petal lengths corresponding to each species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=iris,aes(x=Species,y=Petal.Length)) + geom_boxplot() + geom_point()\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-46-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\n## Importing files\n\nThere are multiple ways to import files into `R`. The most common data set format is the `.csv` file. You can import CSV files using the `read.csv(filename)` function. \n\nFirst, download the file `SleepHealthData.csv` from Canvas in the same folder as your R source code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd() # save your data in this folder\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"C:/Users/migsf/OneDrive/Documents/GitHub/EAB703-Slides-2025\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsleep <- read.csv(\"SleepHealthData.csv\") # or use a specific path to your folder\nglimpse(sleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 374\nColumns: 13\n$ person_id               <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,~\n$ gender                  <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male\"~\n$ age                     <int> 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29~\n$ occupation              <chr> \"Software Engineer\", \"Doctor\", \"Doctor\", \"Sale~\n$ sleep_duration          <dbl> 6.1, 6.2, 6.2, 5.9, 5.9, 5.9, 6.3, 7.8, 7.8, 7~\n$ quality_of_sleep        <int> 6, 6, 6, 4, 4, 4, 6, 7, 7, 7, 6, 7, 6, 6, 6, 6~\n$ physical_activity_level <int> 42, 60, 60, 30, 30, 30, 40, 75, 75, 75, 30, 75~\n$ stress_level            <int> 6, 8, 8, 8, 8, 8, 7, 6, 6, 6, 8, 6, 8, 8, 8, 8~\n$ bmi_category            <chr> \"Overweight\", \"Normal\", \"Normal\", \"Obese\", \"Ob~\n$ blood_pressure          <chr> \"126/83\", \"125/80\", \"125/80\", \"140/90\", \"140/9~\n$ heart_rate              <int> 77, 75, 75, 85, 85, 85, 82, 70, 70, 70, 70, 70~\n$ daily_steps             <int> 4200, 10000, 10000, 3000, 3000, 3000, 3500, 80~\n$ sleep_disorder          <chr> \"None\", \"None\", \"None\", \"Sleep Apnea\", \"Sleep ~\n```\n\n\n:::\n:::\n\n\n\n## Exercise\n\nWe will use the `sleep` data set we just imported into `R` from the `csv` file.\n\n:::{.panel-tabset}\n\n### Exercise\n\nCreate a plot that shows the distribution of sleep duration (`sleep_duration`) for different sleep disorders (`sleep_disorder`).\n\n### Answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=sleep,aes(x=sleep_disorder,y=sleep_duration)) + geom_boxplot() + geom_point()\n```\n\n::: {.cell-output-display}\n![](lecture2_files/figure-pdf/unnamed-chunk-48-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n:::\n",
    "supporting": [
      "lecture2_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\n\\usepackage{caption}\n\\usepackage{longtable}\n\\usepackage{colortbl}\n\\usepackage{array}\n\\usepackage{anyfontsize}\n\\usepackage{multirow}\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}